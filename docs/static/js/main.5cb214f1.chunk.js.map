{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.jsx","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.jsx","components/Navbar.jsx","components/GifExpertApp.jsx","index.js"],"names":["AddCategory","SetCategories","useState","state","setstate","onSubmit","e","preventDefault","trim","length","idx","InputGroup","className","FormControl","placeholder","type","value","onChange","target","getGiphy","list","a","search","encodeURI","urls","fetch","peticion","json","data","giphys","map","id","title","url","images","downsized_medium","GifGridItem","Row","Card","style","marginRight","marginTop","height","width","Img","variant","src","Body","Text","fontSize","GifGrid","loading","useEffect","then","imgs","UseFetchGifs","Breadcrumb","Item","active","key","Menu","Navbar","marginBottom","bg","Brand","Toggle","Collapse","href","GifExpertApp","categories","Container","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5cb214f1.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport {InputGroup, FormControl} from 'react-bootstrap'\r\n\r\nexport const AddCategory = ({SetCategories}) => {\r\n    const [state, setstate] = useState('')\r\n    const handlerInput = ({target}) => {\r\n        setstate(target.value)\r\n    }\r\n\r\n    const handlerSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (state.trim().length > 1) {\r\n            SetCategories(idx => {\r\n                return [state, ...idx]\r\n     \r\n             })\r\n             setstate('')\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handlerSubmit} >\r\n          <InputGroup className=\"mb-3\">\r\n          <FormControl\r\n          placeholder=\"Search...\"\r\n           type=\"text\" \r\n           value={state} \r\n           onChange={handlerInput}\r\n          />\r\n        </InputGroup>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    SetCategories: PropTypes.func.isRequired\r\n}","\r\n export const getGiphy = async(list) =>{\r\n    const keyapp = 'QqD4rvBq523Gcab4glbjseFsy3Z5wiJu'\r\n    const search = encodeURI(list)\r\n    const limitParam = 12\r\n    const urls = `https://api.giphy.com/v1/gifs/search?q=${search}&limit=${limitParam}&api_key=${keyapp}`;\r\n    const peticion = await fetch(urls)\r\n    const {data} = await peticion.json();\r\n    const giphys = data.map(({id,title,\r\n      images: {downsized_medium: {url}\r\n  }}) => (\r\n     { id,\r\n      title,  \r\n      url ,     \r\n  }))\r\n \r\n  return giphys\r\n}","import React from \"react\";\r\nimport { Row,Card } from \"react-bootstrap\";\r\nexport const GifGridItem = ({ title, url }) => (\r\n    <Row >\r\n    <Card  className=\"animate__animated animate__fadeInUp\"  style={{ marginRight:'5rem',marginTop:'2px',height:'20rem',width: '25rem'}} >\r\n    <Card.Img variant=\"top\"  style={{ height:'15rem'}} src={url} />\r\n    <Card.Body >\r\n    <Card.Text className=\"text-center\" style={{fontSize:'1.1rem'}}>\r\n            {title}\r\n      </Card.Text>\r\n      </Card.Body>\r\n  </Card>\r\n  </Row>\r\n  \r\n  );\r\n","import React, { Fragment } from \"react\";\r\nimport { UseFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { Row,Breadcrumb } from \"react-bootstrap\";\r\nimport \"animate.css\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ list }) => {\r\n  const { data: images } = UseFetchGifs(list);\r\n\r\n  return (\r\n    <Fragment>\r\n     <Breadcrumb>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>{list}</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Lista</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n\r\n      <Row>\r\n        {images.map((data) => {\r\n          return <GifGridItem {...data} key={data.id} />;\r\n        })}\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGiphy } from \"../helpers/getGifs\";\r\nexport const UseFetchGifs = (list) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n    useEffect(() =>{\r\n        getGiphy(list)\r\n        .then( imgs => {     \r\n            setstate({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n    })\r\n    },[list])\r\n\r\n\r\n    return state\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Navbar } from \"react-bootstrap\";\r\n\r\nexport const Menu = () => {\r\n  return (\r\n    <Navbar style={{marginBottom:\"2rem\"}}bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Brand >Giphy with React</Navbar.Brand>\r\n      <Navbar.Toggle />\r\n      <Navbar.Collapse className=\"justify-content-end\">\r\n        <Navbar.Text>\r\n          Made by: <a href=\"https://bitbucket.org/JuanMa_/\">Juan Manuel</a>\r\n        </Navbar.Text>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n","import React, { useState,Fragment} from 'react'\r\nimport { AddCategory } from \"./AddCategory\";\r\nimport { GifGrid } from \"./GifGrid\";\r\nimport { Menu } from \"./Navbar\";\r\nimport {Container} from \"react-bootstrap\"\r\n\r\nconst GifExpertApp = () =>{\r\n    const [categories, SetCategories] = useState(['Naruto']);\r\n  \r\n    return(\r\n        <Fragment>\r\n            <Menu/>        \r\n        <Container >\r\n            \r\n            <AddCategory SetCategories= {SetCategories}/>\r\n            <hr/>\r\n\r\n         \r\n               {\r\n                   categories.map((list) =>(\r\n                      <GifGrid\r\n                      key= {list}\r\n                      list= {list}\r\n                      />\r\n                               \r\n                ))}\r\n      \r\n        </Container>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}